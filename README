NAME
    WebService::Recruit::Shingaku - An Interface for Recruit Shingaku net
    Web Service

SYNOPSIS
        use WebService::Recruit::Shingaku;
    
        my $service = WebService::Recruit::Shingaku->new();
    
        my $param = {
            'key' => $ENV{'WEBSERVICE_RECRUIT_KEY'},
            'keyword' => '数学',
            'pref_cd' => '12',
        };
        my $res = $service->school( %$param );
        my $root = $res->root;
        printf("api_version: %s\n", $root->api_version);
        printf("results_available: %s\n", $root->results_available);
        printf("results_returned: %s\n", $root->results_returned);
        printf("results_start: %s\n", $root->results_start);
        printf("school: %s\n", $root->school);
        print "...\n";

DESCRIPTION
    リクルート進学ネットに掲載されている学校および各
    種学問・仕事・資格を様々な軸で検索できるAPIです。

METHODS
  new
    This is the constructor method for this class.

        my $service = WebService::Recruit::Shingaku->new();

    This accepts optional parameters.

        my $conf = {
            utf8_flag => 1,
            param => {
                # common parameters of this web service 
            },
        };
        my $service = WebService::Recruit::Shingaku->new( %$conf );

  add_param
    Add common parameter of tihs web service.

        $service->add_param( param_key => param_value );

    You can add multiple parameters by calling once.

        $service->add_param( param_key1 => param_value1,
                             param_key2 => param_value2,
                             ...);

  get_param
    Returns common parameter value of the specified key.

        my $param_value = $service->get( 'param_key' );

  school
    This makes a request for "school" API. See
    WebService::Recruit::Shingaku::School for details.

        my $res = $service->school( %$param );

  subject
    This makes a request for "subject" API. See
    WebService::Recruit::Shingaku::Subject for details.

        my $res = $service->subject( %$param );

  work
    This makes a request for "work" API. See
    WebService::Recruit::Shingaku::Work for details.

        my $res = $service->work( %$param );

  license
    This makes a request for "license" API. See
    WebService::Recruit::Shingaku::License for details.

        my $res = $service->license( %$param );

  pref
    This makes a request for "pref" API. See
    WebService::Recruit::Shingaku::Pref for details.

        my $res = $service->pref( %$param );

  category
    This makes a request for "category" API. See
    WebService::Recruit::Shingaku::Category for details.

        my $res = $service->category( %$param );

  utf8_flag / user_agent / lwp_useragent / http_lite
    This modules uses XML::TreePP module internally. Following methods are
    available to configure it.

        $service->utf8_flag( 1 );
        $service->user_agent( 'Foo-Bar/1.0 ' );
        $service->lwp_useragent( LWP::UserAgent->new() );
        $service->http_lite( HTTP::Lite->new() );

SEE ALSO
    http://webservice.recruit.co.jp/shingaku/

AUTHOR
    RECRUIT Media Technology Labs <mtl@cpan.org>

COPYRIGHT
    Copyright 2008 RECRUIT Media Technology Labs

